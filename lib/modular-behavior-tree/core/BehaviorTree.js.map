{"version":3,"sources":["../../src/core/BehaviorTree.js"],"names":["Tick","BaseNode","createUUID","SUCCESS","FAILURE","RUNNING","COMPOSITE","ACTION","DECORATOR","CONDITION","fs","parse","composites","decorators","actions","BehaviorTree","constructor","tree","blackboard","_tree","_cloneNode","_blackboard","_registry","_tick","_lastResult","_lastOpenNodes","parseFileXML","path","names","xml","readFileSync","obj","root","children","length","Error","node","_parseXMLNode","xmlnode","registry","Cls","name","EvalError","cloned_node","properties","attributes","category","i","child","push","clone","Object","assign","create","getPrototypeOf","_uuid","newChildren","tick","setOpenNodes","_execute","getOpenNodes"],"mappings":"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","file":"BehaviorTree.js","sourcesContent":["import Tick from './Tick'\nimport BaseNode from './BaseNode'\nimport {createUUID} from '../functions'\nimport { SUCCESS, FAILURE, RUNNING, COMPOSITE, ACTION, DECORATOR, CONDITION } from '../constants'\nimport fs from 'fs'\nimport parse from 'xml-parser'\n\nimport * as composites from '../composites';\nimport * as decorators from '../decorators';\nimport * as actions from '../actions';\n\nexport default class BehaviorTree {\n\n    constructor({tree, blackboard}) {\n        this._tree = BehaviorTree._cloneNode(tree)\n        this._blackboard = blackboard\n        this._registry = {}\n        this._tick = null\n        this._lastResult = null\n        this._lastOpenNodes = []\n    }\n\n    /**\n     * \n     * @param {String} path Path to XML File\n     * @param {Object} names Names should be an object containing the class or a nodeobj {MyAction: MyAction} {SubTree1: subtree1}\n     */\n    static parseFileXML(path, names) {\n\n        //console.log(names)\n\n        names = names || {}\n\n        let xml = fs.readFileSync(path, 'utf8');\n        let obj = parse(xml)\n\n        if(obj.root.children.length < 1) throw new Error('BehaviorTree needs one child node')\n        if(obj.root.children.length > 1) throw new Error('BehaviorTree can have only one child node')\n\n        let node = this._parseXMLNode(obj.root.children[0], names)\n        return node\n\n    }\n\n    static _parseXMLNode(xmlnode, registry) {\n\n        let Cls;\n\n        if(xmlnode.name in registry) {\n            Cls = registry[xmlnode.name]\n        } else if(xmlnode.name in decorators) {\n            Cls = decorators[xmlnode.name]\n        } else if(xmlnode.name in composites) {\n            Cls = composites[xmlnode.name]\n        } else if(xmlnode.name in actions) {\n            Cls = actions[xmlnode.name]\n        } else {\n            throw new EvalError(`Invalid node: ${xmlnode.name}`)\n        }\n\n        // if obj (subtree) -> clone \n        if(Cls instanceof BaseNode) {\n            let cloned_node = this._cloneNode(Cls)\n            return cloned_node\n        }\n\n        // if class -> create instance\n        let node = new Cls({properties: xmlnode.attributes})\n        \n        switch(node.category) {\n            case COMPOSITE:\n                for(let i=0; i<xmlnode.children.length; i++) {\n                    let child = this._parseXMLNode(xmlnode.children[i], registry)\n                    node.children.push(child)\n                }\n                break;\n            case DECORATOR:\n                if(xmlnode.children.length < 1) throw new Error(`Decorator ${xmlnode.name} requires one child node`)\n                if(xmlnode.children.length > 1) throw new Error(`Decorator ${xmlnode.name} can have only one child node`)\n                node.child = this._parseXMLNode(xmlnode.children[0])\n                break;\n        }\n\n        return node;\n    }\n\n    static _cloneNode(node) {\n\n        let clone = Object.assign( Object.create( Object.getPrototypeOf(node)), node)\n\n        clone._uuid = createUUID()\n\n        switch(clone.category) {\n            case COMPOSITE:\n                let newChildren = []\n                for(let i=0; i<clone.children.length; i++) {\n                    newChildren.push(this._cloneNode(clone.children[i]))\n                }\n                clone.children = newChildren\n                break;\n            case DECORATOR:\n                clone.child = this._cloneNode(clone.children[0])\n                break;\n        }\n\n        return clone\n\n    }\n\n    async tick() {\n\n        this._tick = new Tick()\n        this._tick.setOpenNodes(this._lastOpenNodes)\n        this._lastResult = await this._tree._execute(this._blackboard, this._tick)\n        this._lastOpenNodes = this._tick.getOpenNodes()\n\n\n        // to make sure all are closed if no node is running\n        if(this._lastResult !== RUNNING) {\n            this._lastOpenNodes = []\n        }\n\n        /*\n        console.log(\"================\")\n        console.log(this._lastResult)\n        console.log(this._tick._openNodes)\n        */\n        \n    }\n\n\n\n}\n"]}